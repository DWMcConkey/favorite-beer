#!/usr/bin/env groovy

svc_name = 'favorite-beer'
gcr_host = 'gcr.io'
docker_image = 'favorite-beer'
gcp_project = 'redapt-anthos-poc'
release_name = "gcp"

podTemplate(label: 'io',
  containers: [
    containerTemplate(name: 'gcloud-helm', image: "devth/helm:v3.0.2", ttyEnabled: true, command: 'cat'),
    containerTemplate(name: 'git', image: "alpine/git:1.0.7", ttyEnabled: true, command: 'cat')
  ],
  volumes: [
    emptyDirVolume(mountPath: '/etc/tests', memory: false)
  ]
)

{
  node(label: 'io') {

    container('git') {
      stage('\u27A1 Grab Last Commit') {

        git branch: 'master',
        url: 'https://github.com/redapt/favorite-beer.git'

        lastCommitLong = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
        sh("echo ${lastCommitLong}")
      }
    }

    container('gcloud-helm') {

      withCredentials([file(credentialsId: 'gcp-sa', variable: 'GC_KEY')]) {
        stage('\u27A1 Deploy to Google Build') {

          dir("spa-react-netcore-redis/voting") {
          
            sh("gcloud auth activate-service-account --key-file=${GC_KEY}")
            sh("gcloud builds submit --config jenkins-cloudbuild.yaml --gcs-log-dir gs://redapt-anthos-poc_cloudbuild-logs/logs --substitutions=TAG_NAME='${gcr_host}/${gcp_project}/${docker_image}:${lastCommitLong}' .")

            sh("gcloud auth activate-service-account --key-file=${GC_KEY}")

          }

          dir("spa-react-netcore-redis/voting/voting") {
            helmDeploy(dry_run: false, name: "${release_name}", chart_dir: "k8s/Chart", values: "k8s/${release_name}-values.yaml", repository: "${gcr_host}/${gcp_project}/${docker_image}", tag: "${lastCommitLong}", namespace: 'default')
          }
      
        }
      }
    }
  }
}

def helmDeploy(Map args) {
  if (args.dry_run) {
    println "Running dry-run deployment"
    sh "helm upgrade --dry-run --debug --install ${args.name} ${args.chart_dir} -f ${args.values} --set image.tag=${args.tag} --set image.repository=${args.repository} --namespace=${args.namespace}"
  }
  else {
    println "Running deployment"
    sh "helm upgrade --install ${args.name} ${args.chart_dir} -f ${args.values} --set image.tag=${args.tag}  --set image.repository=${args.repository} --namespace=${args.namespace}"
  }
}
